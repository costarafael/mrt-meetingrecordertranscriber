#!/usr/bin/swift

import Foundation
import CoreAudio
import AudioToolbox

print("üéµ TESTE CAPTURA EM TEMPO REAL")
print("==============================")

// Callback para monitorar propriedades do dispositivo
let propertyListener: AudioObjectPropertyListenerProc = { (objectID, numAddresses, addresses, clientData) in
    print("üîä Atividade detectada no dispositivo de √°udio!")
    return noErr
}

// Obter dispositivo padr√£o
func getDefaultOutputDevice() -> AudioDeviceID? {
    var deviceID = AudioDeviceID()
    var dataSize = UInt32(MemoryLayout<AudioDeviceID>.size)
    
    var address = AudioObjectPropertyAddress(
        mSelector: kAudioHardwarePropertyDefaultOutputDevice,
        mScope: kAudioObjectPropertyScopeGlobal,
        mElement: kAudioObjectPropertyElementMain
    )
    
    let status = AudioObjectGetPropertyData(
        AudioObjectID(kAudioObjectSystemObject),
        &address,
        0,
        nil,
        &dataSize,
        &deviceID
    )
    
    return status == noErr ? deviceID : nil
}

guard let deviceID = getDefaultOutputDevice() else {
    print("‚ùå Erro: Dispositivo n√£o encontrado")
    exit(1)
}

print("‚úÖ Monitorando dispositivo ID: \(deviceID)")
print("üéß Toque algum √°udio agora (m√∫sica, YouTube, etc.)")
print("‚è±Ô∏è  Monitorando por 15 segundos...")

// Configurar listener para detectar atividade
var address = AudioObjectPropertyAddress(
    mSelector: kAudioDevicePropertyDeviceIsRunning,
    mScope: kAudioObjectPropertyScopeGlobal,
    mElement: kAudioObjectPropertyElementMain
)

let status = AudioObjectAddPropertyListener(deviceID, &address, propertyListener, nil)

if status == noErr {
    print("üéØ Listener instalado - detectando atividade de √°udio...")
    
    // Verificar estado inicial
    var isRunning = UInt32(0)
    var dataSize = UInt32(MemoryLayout<UInt32>.size)
    
    AudioObjectGetPropertyData(deviceID, &address, 0, nil, &dataSize, &isRunning)
    print("üìä Estado inicial do dispositivo: \(isRunning == 1 ? "ATIVO" : "INATIVO")")
    
    // Monitorar por 15 segundos
    for i in 1...15 {
        sleep(1)
        
        // Verificar estado atual
        AudioObjectGetPropertyData(deviceID, &address, 0, nil, &dataSize, &isRunning)
        let status = isRunning == 1 ? "üü¢ TOCANDO" : "üî¥ SIL√äNCIO"
        print("[\(String(format: "%02d", i))s] \(status)")
    }
    
    // Remover listener
    AudioObjectRemovePropertyListener(deviceID, &address, propertyListener, nil)
    print("‚úÖ Monitoramento conclu√≠do!")
    
} else {
    print("‚ùå Erro instalando listener: \(status)")
}

print("")
print("üéØ RESULTADO: Sistema de monitoramento REAL funcionando!")
print("üìã Esta √© a base da captura Core Audio TAP Real")

exit(0)