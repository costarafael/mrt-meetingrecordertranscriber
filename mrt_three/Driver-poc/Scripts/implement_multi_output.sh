#!/bin/bash

# =============================================================================
# Implementa√ß√£o da SOLU√á√ÉO CORRETA: Multi-Output Device Autom√°tico
# Baseado na pesquisa: esta √© a √∫nica forma real de fazer passthrough
# =============================================================================

echo "üéØ IMPLEMENTANDO SOLU√á√ÉO CORRETA: MULTI-OUTPUT DEVICE"
echo "====================================================="

echo ""
echo "üí° DESCOBERTA IMPORTANTE da pesquisa:"
echo "- BlackHole NUNCA foi projetado para passthrough direto"
echo "- Solu√ß√£o padr√£o √© Multi-Output Device MANUAL"
echo "- Drivers virtuais n√£o podem enviar para dispositivos f√≠sicos via c√≥digo"
echo ""
echo "üîß SOLU√á√ÉO: Criar Multi-Output Device automaticamente"

# Criar script que cria Multi-Output Device automaticamente
cat > /tmp/create_multi_output.scpt << 'EOF'
tell application "Audio MIDI Setup"
    activate
    
    -- Espera a aplica√ß√£o abrir
    delay 1
    
    -- Tentar criar Multi-Output Device via AppleScript
    -- (Isso pode n√£o funcionar em todas as vers√µes do macOS)
    
end tell

-- Alternativa: usar SoX ou comandos de terminal
do shell script "echo 'Multi-Output Device creation attempted'"
EOF

echo "üìã Criando utilit√°rio para Multi-Output Device..."

# Criar aplica√ß√£o Swift para criar Multi-Output Device programaticamente
cat > /Users/rafaelaredes/Documents/mrt_macos/mrt_three/Driver-poc/create_multi_output.swift << 'EOF'
import CoreAudio
import Foundation

class MultiOutputCreator {
    
    func createMultiOutputDevice() -> AudioDeviceID? {
        // NOTA: Criar Multi-Output Device programaticamente √© extremamente complexo
        // A Apple n√£o fornece APIs p√∫blicas simples para isso
        
        // M√©todo 1: Tentar usar AudioObjectCreate (pode n√£o funcionar)
        var deviceID: AudioDeviceID = kAudioObjectUnknown
        
        // Configura√ß√£o do Multi-Output Device
        var deviceInfo = AudioObjectPropertyAddress(
            mSelector: kAudioPlugInCreateAggregateDevice,
            mScope: kAudioObjectPropertyScopeGlobal,
            mElement: kAudioObjectPropertyElementMain
        )
        
        // Este m√©todo geralmente falha para aplica√ß√µes normais
        // porque requer privil√©gios especiais
        
        print("‚ö†Ô∏è  Criar Multi-Output Device programaticamente √© muito complexo")
        print("üí° Recomenda√ß√£o: Usar abordagem manual ou solicitar ao usu√°rio")
        
        return nil
    }
    
    func findMRTAudioDevice() -> AudioDeviceID? {
        var propsize: UInt32 = 0
        var address = AudioObjectPropertyAddress(
            mSelector: kAudioHardwarePropertyDevices,
            mScope: kAudioObjectPropertyScopeGlobal,
            mElement: kAudioObjectPropertyElementMain)
        
        guard AudioObjectGetPropertyDataSize(AudioObjectID(kAudioObjectSystemObject), &address, 0, nil, &propsize) == noErr else {
            return nil
        }
        
        let deviceCount = Int(propsize) / MemoryLayout<AudioDeviceID>.size
        let devices = UnsafeMutablePointer<AudioDeviceID>.allocate(capacity: deviceCount)
        defer { devices.deallocate() }
        
        guard AudioObjectGetPropertyData(AudioObjectID(kAudioObjectSystemObject), &address, 0, nil, &propsize, devices) == noErr else {
            return nil
        }
        
        for i in 0..<deviceCount {
            let deviceID = devices[i]
            
            var nameAddress = AudioObjectPropertyAddress(
                mSelector: kAudioDevicePropertyDeviceNameCFString,
                mScope: kAudioObjectPropertyScopeGlobal,
                mElement: kAudioObjectPropertyElementMain)
            
            var nameSize: UInt32 = UInt32(MemoryLayout<CFString>.size)
            var deviceName: CFString = "" as CFString
            
            if AudioObjectGetPropertyData(deviceID, &nameAddress, 0, nil, &nameSize, &deviceName) == noErr {
                let name = deviceName as String
                if name.contains("MRT") {
                    print("üéØ MRTAudio encontrado: [\(deviceID)] \(name)")
                    return deviceID
                }
            }
        }
        
        return nil
    }
    
    func checkExistingMultiOutput() -> AudioDeviceID? {
        // Verifica se j√° existe um Multi-Output Device configurado
        // que inclui MRTAudio
        
        var propsize: UInt32 = 0
        var address = AudioObjectPropertyAddress(
            mSelector: kAudioHardwarePropertyDevices,
            mScope: kAudioObjectPropertyScopeGlobal,
            mElement: kAudioObjectPropertyElementMain)
        
        guard AudioObjectGetPropertyDataSize(AudioObjectID(kAudioObjectSystemObject), &address, 0, nil, &propsize) == noErr else {
            return nil
        }
        
        let deviceCount = Int(propsize) / MemoryLayout<AudioDeviceID>.size
        let devices = UnsafeMutablePointer<AudioDeviceID>.allocate(capacity: deviceCount)
        defer { devices.deallocate() }
        
        guard AudioObjectGetPropertyData(AudioObjectID(kAudioObjectSystemObject), &address, 0, nil, &propsize, devices) == noErr else {
            return nil
        }
        
        for i in 0..<deviceCount {
            let deviceID = devices[i]
            
            var nameAddress = AudioObjectPropertyAddress(
                mSelector: kAudioDevicePropertyDeviceNameCFString,
                mScope: kAudioObjectPropertyScopeGlobal,
                mElement: kAudioObjectPropertyElementMain)
            
            var nameSize: UInt32 = UInt32(MemoryLayout<CFString>.size)
            var deviceName: CFString = "" as CFString
            
            if AudioObjectGetPropertyData(deviceID, &nameAddress, 0, nil, &nameSize, &deviceName) == noErr {
                let name = deviceName as String
                if name.contains("Multi-Output") {
                    print("üì± Multi-Output encontrado: [\(deviceID)] \(name)")
                    return deviceID
                }
            }
        }
        
        return nil
    }
}

// Executar an√°lise
let creator = MultiOutputCreator()

print("üîç AN√ÅLISE DO SISTEMA DE √ÅUDIO")
print("==============================")

if let mrtDevice = creator.findMRTAudioDevice() {
    print("‚úÖ MRTAudio encontrado: \(mrtDevice)")
} else {
    print("‚ùå MRTAudio n√£o encontrado")
}

if let multiDevice = creator.checkExistingMultiOutput() {
    print("‚úÖ Multi-Output existente: \(multiDevice)")
    print("üí° Voc√™ pode configurar este Multi-Output manualmente")
} else {
    print("‚ÑπÔ∏è  Nenhum Multi-Output encontrado")
}

print("\nüõ†Ô∏è  SOLU√á√ïES DISPON√çVEIS:")
print("1. Manual: Audio MIDI Setup ‚Üí Criar Multi-Output Device")
print("2. Script autom√°tico (limitado)")
print("3. Solicitar permiss√µes especiais (complexo)")
EOF

echo "üöÄ Executando an√°lise do sistema..."
swift /Users/rafaelaredes/Documents/mrt_macos/mrt_three/Driver-poc/create_multi_output.swift

echo ""
echo "üéØ PR√ìXIMOS PASSOS RECOMENDADOS:"
echo "================================"
echo ""
echo "üìã SOLU√á√ÉO 1: Manual (mais confi√°vel)"
echo "1. Abrir Audio MIDI Setup"
echo "2. Clique no '+' ‚Üí Criar Multi-Output Device"  
echo "3. Adicionar 'MacBook Air Speakers' e 'MRTAudio 2ch'"
echo "4. Configurar como dispositivo padr√£o"
echo ""
echo "üìã SOLU√á√ÉO 2: Script autom√°tico (experimental)"
echo "Vou criar um script que tenta automatizar isso..."

# Criar script de automa√ß√£o via osascript
cat > /Users/rafaelaredes/Documents/mrt_macos/mrt_three/Driver-poc/Scripts/setup_multi_output.sh << 'EOF'
#!/bin/bash

echo "üîß Configurando Multi-Output Device automaticamente..."

# Tentar abrir Audio MIDI Setup
osascript << 'APPLESCRIPT'
tell application "Audio MIDI Setup"
    activate
    delay 2
end tell

tell application "System Events"
    tell process "Audio MIDI Setup"
        -- Tentar clicar no bot√£o +
        try
            click button "+" of window 1
            delay 1
            
            -- Procurar op√ß√£o "Create Multi-Output Device"
            click menu item "Create Multi-Output Device" of menu 1 of button "+" of window 1
            delay 1
            
            display dialog "Multi-Output Device criado! Configure manualmente adicionando MacBook Air Speakers e MRTAudio 2ch"
        on error
            display dialog "N√£o foi poss√≠vel criar automaticamente. Abra Audio MIDI Setup e crie manualmente."
        end try
    end tell
end tell
APPLESCRIPT

echo "‚úÖ Tentativa de cria√ß√£o autom√°tica conclu√≠da"
echo "Se n√£o funcionou, crie manualmente no Audio MIDI Setup"
EOF

chmod +x /Users/rafaelaredes/Documents/mrt_macos/mrt_three/Driver-poc/Scripts/setup_multi_output.sh

echo ""
echo "‚úÖ UTILIT√ÅRIOS CRIADOS:"
echo "- create_multi_output.swift (an√°lise)"
echo "- Scripts/setup_multi_output.sh (automa√ß√£o)"
echo ""
echo "üéØ TESTE AGORA:"
echo "bash Scripts/setup_multi_output.sh"

rm -f /tmp/create_multi_output.scpt