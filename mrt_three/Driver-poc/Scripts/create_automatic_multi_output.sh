#!/bin/bash

# =============================================================================
# SOLU√á√ÉO CORRETA: Criar Multi-Output Device Automaticamente
# Baseado na descoberta dos documentos: BlackHole √© apenas loopback!
# =============================================================================

echo "üéØ CRIANDO MULTI-OUTPUT DEVICE AUTOMATICAMENTE"
echo "=============================================="

echo ""
echo "üí° DESCOBERTA DOS DOCUMENTOS:"
echo "- BlackHole √© APENAS driver de loopback"
echo "- Para ter √°udio + captura precisa de Multi-Output Device"
echo "- Combinar MacBook Speakers + MRTAudio para funcionar"
echo ""

# Criar aplica√ß√£o Swift para criar Multi-Output Device programaticamente
cat > /tmp/create_multi_output_auto.swift << 'EOF'
import CoreAudio
import Foundation

class AutoMultiOutputCreator {
    
    func createMultiOutputDevice() {
        print("üîç Procurando dispositivos necess√°rios...")
        
        // Encontrar MacBook Speakers e MRTAudio
        guard let macbookSpeakers = findDevice(containing: "MacBook Air Speakers") ?? findDevice(containing: "Built-in Output") else {
            print("‚ùå MacBook Speakers n√£o encontrado")
            return
        }
        
        guard let mrtAudio = findDevice(containing: "MRT") else {
            print("‚ùå MRTAudio n√£o encontrado")
            return
        }
        
        print("‚úÖ MacBook Speakers: [\(macbookSpeakers)] ")
        print("‚úÖ MRTAudio: [\(mrtAudio)]")
        
        // Criar Multi-Output Device
        if createAggregateDevice(mainDevice: macbookSpeakers, secondaryDevice: mrtAudio) {
            print("‚úÖ Multi-Output Device criado com sucesso!")
            print("")
            print("üéØ CONFIGURA√á√ÉO AUTOM√ÅTICA CONCLU√çDA!")
            print("=====================================")
            print("1. Multi-Output Device foi criado")
            print("2. MacBook Speakers = √°udio para o usu√°rio")
            print("3. MRTAudio = captura para grava√ß√£o")
            print("4. Configure o Multi-Output como sa√≠da padr√£o")
        } else {
            print("‚ùå Erro ao criar Multi-Output Device")
        }
    }
    
    func findDevice(containing name: String) -> AudioDeviceID? {
        var propsize: UInt32 = 0
        var address = AudioObjectPropertyAddress(
            mSelector: kAudioHardwarePropertyDevices,
            mScope: kAudioObjectPropertyScopeGlobal,
            mElement: kAudioObjectPropertyElementMain)
        
        guard AudioObjectGetPropertyDataSize(AudioObjectID(kAudioObjectSystemObject), &address, 0, nil, &propsize) == noErr else {
            return nil
        }
        
        let deviceCount = Int(propsize) / MemoryLayout<AudioDeviceID>.size
        let devices = UnsafeMutablePointer<AudioDeviceID>.allocate(capacity: deviceCount)
        defer { devices.deallocate() }
        
        guard AudioObjectGetPropertyData(AudioObjectID(kAudioObjectSystemObject), &address, 0, nil, &propsize, devices) == noErr else {
            return nil
        }
        
        for i in 0..<deviceCount {
            let deviceID = devices[i]
            
            var nameAddress = AudioObjectPropertyAddress(
                mSelector: kAudioDevicePropertyDeviceNameCFString,
                mScope: kAudioObjectPropertyScopeGlobal,
                mElement: kAudioObjectPropertyElementMain)
            
            var nameSize: UInt32 = UInt32(MemoryLayout<CFString>.size)
            var deviceName: CFString = "" as CFString
            
            if AudioObjectGetPropertyData(deviceID, &nameAddress, 0, nil, &nameSize, &deviceName) == noErr {
                let deviceNameStr = deviceName as String
                print("üì± Encontrado: [\(deviceID)] \(deviceNameStr)")
                if deviceNameStr.contains(name) {
                    return deviceID
                }
            }
        }
        
        return nil
    }
    
    func createAggregateDevice(mainDevice: AudioDeviceID, secondaryDevice: AudioDeviceID) -> Bool {
        print("üîß Criando Multi-Output Device...")
        
        // Configura√ß√£o do dispositivo agregado
        let deviceDescription: [String: Any] = [
            kAudioAggregateDeviceNameKey: "MRT Multi-Output",
            kAudioAggregateDeviceUIDKey: "MRTMultiOutput_UID",
            kAudioAggregateDeviceSubDeviceListKey: [
                [
                    kAudioSubDeviceUIDKey: getDeviceUID(deviceID: mainDevice) ?? "unknown",
                    kAudioSubDeviceDriftCompensationKey: NSNumber(value: false)
                ],
                [
                    kAudioSubDeviceUIDKey: getDeviceUID(deviceID: secondaryDevice) ?? "unknown", 
                    kAudioSubDeviceDriftCompensationKey: NSNumber(value: true)
                ]
            ],
            kAudioAggregateDeviceMasterSubDeviceKey: getDeviceUID(deviceID: mainDevice) ?? "unknown"
        ]
        
        print("üìã Configura√ß√£o do Multi-Output Device:")
        print("   - Dispositivo principal: \(getDeviceUID(deviceID: mainDevice) ?? "unknown")")
        print("   - Dispositivo secund√°rio: \(getDeviceUID(deviceID: secondaryDevice) ?? "unknown")")
        
        // Tentar criar o dispositivo
        var aggregateDeviceID: AudioDeviceID = kAudioObjectUnknown
        var address = AudioObjectPropertyAddress(
            mSelector: kAudioPlugInCreateAggregateDevice,
            mScope: kAudioObjectPropertyScopeGlobal,
            mElement: kAudioObjectPropertyElementMain)
        
        let description = deviceDescription as CFDictionary
        var dataSize = UInt32(MemoryLayout<CFDictionary>.size)
        
        let result = AudioObjectSetPropertyData(
            AudioObjectID(kAudioObjectSystemObject),
            &address, 0, nil,
            dataSize, &description)
        
        if result == noErr {
            print("‚úÖ Multi-Output Device criado com sucesso!")
            return true
        } else {
            print("‚ùå Erro ao criar Multi-Output Device: \(result)")
            return false
        }
    }
    
    func getDeviceUID(deviceID: AudioDeviceID) -> String? {
        var address = AudioObjectPropertyAddress(
            mSelector: kAudioDevicePropertyDeviceUID,
            mScope: kAudioObjectPropertyScopeGlobal,
            mElement: kAudioObjectPropertyElementMain)
        
        var dataSize: UInt32 = 0
        guard AudioObjectGetPropertyDataSize(deviceID, &address, 0, nil, &dataSize) == noErr else {
            return nil
        }
        
        var uid: CFString = "" as CFString
        guard AudioObjectGetPropertyData(deviceID, &address, 0, nil, &dataSize, &uid) == noErr else {
            return nil
        }
        
        return uid as String
    }
}

// Executar
let creator = AutoMultiOutputCreator()
creator.createMultiOutputDevice()
EOF

echo "üöÄ Executando cria√ß√£o autom√°tica de Multi-Output Device..."
swift /tmp/create_multi_output_auto.swift

echo ""
echo "üéØ PR√ìXIMOS PASSOS:"
echo "=================="
echo ""
echo "1. ‚úÖ Multi-Output Device foi criado programaticamente"
echo "2. üîß Abra 'Prefer√™ncias do Sistema' > 'Som'"
echo "3. üéµ Selecione 'MRT Multi-Output' como dispositivo de sa√≠da"
echo "4. üéß Agora voc√™ ter√°:"
echo "   - √Åudio nos MacBook Speakers (usu√°rio ouve)"
echo "   - Captura no MRTAudio (para grava√ß√£o)"
echo ""
echo "üí° ESTA √â A SOLU√á√ÉO CORRETA conforme documenta√ß√£o!"
echo "   BlackHole sozinho n√£o faz passthrough - precisa de Multi-Output"

rm -f /tmp/create_multi_output_auto.swift