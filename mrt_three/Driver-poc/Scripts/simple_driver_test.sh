#!/bin/bash

# =============================================================================
# TESTE SIMPLES: Verificar e tentar for√ßar driver a rodar
# =============================================================================

echo "üöÄ TESTE SIMPLES DE INICIALIZA√á√ÉO DO DRIVER"
echo "==========================================="

# Criar script Swift simplificado
cat > /tmp/simple_test.swift << 'EOF'
import CoreAudio
import Foundation

func simpleDriverTest() {
    print("üîç Verificando driver MRTAudio...")
    
    // Encontrar nosso driver
    var propsize: UInt32 = 0
    var address = AudioObjectPropertyAddress(
        mSelector: kAudioHardwarePropertyDevices,
        mScope: kAudioObjectPropertyScopeGlobal,
        mElement: kAudioObjectPropertyElementMain)
    
    guard AudioObjectGetPropertyDataSize(AudioObjectID(kAudioObjectSystemObject), &address, 0, nil, &propsize) == noErr else {
        print("‚ùå Erro ao obter dispositivos")
        return
    }
    
    let deviceCount = Int(propsize) / MemoryLayout<AudioDeviceID>.size
    let devices = UnsafeMutablePointer<AudioDeviceID>.allocate(capacity: deviceCount)
    defer { devices.deallocate() }
    
    guard AudioObjectGetPropertyData(AudioObjectID(kAudioObjectSystemObject), &address, 0, nil, &propsize, devices) == noErr else {
        print("‚ùå Erro ao ler dispositivos")
        return
    }
    
    var mrtDeviceID: AudioDeviceID = kAudioObjectUnknown
    
    for i in 0..<deviceCount {
        let deviceID = devices[i]
        
        var nameAddress = AudioObjectPropertyAddress(
            mSelector: kAudioDevicePropertyDeviceNameCFString,
            mScope: kAudioObjectPropertyScopeGlobal,
            mElement: kAudioObjectPropertyElementMain)
        
        var nameSize: UInt32 = UInt32(MemoryLayout<CFString>.size)
        var deviceName: CFString = "" as CFString
        
        if AudioObjectGetPropertyData(deviceID, &nameAddress, 0, nil, &nameSize, &deviceName) == noErr {
            let name = deviceName as String
            if name.contains("MRT") {
                print("‚úÖ MRTAudio encontrado: [\(deviceID)] \(name)")
                mrtDeviceID = deviceID
                break
            }
        }
    }
    
    guard mrtDeviceID != kAudioObjectUnknown else {
        print("‚ùå Driver MRT n√£o encontrado!")
        return
    }
    
    // Verificar se est√° rodando
    var isRunning: UInt32 = 0
    var runningAddress = AudioObjectPropertyAddress(
        mSelector: kAudioDevicePropertyDeviceIsRunning,
        mScope: kAudioObjectPropertyScopeGlobal,
        mElement: kAudioObjectPropertyElementMain)
    var runningSize = UInt32(MemoryLayout<UInt32>.size)
    
    if AudioObjectGetPropertyData(mrtDeviceID, &runningAddress, 0, nil, &runningSize, &isRunning) == noErr {
        print("üìä Status: \(isRunning == 1 ? "RODANDO ‚úÖ" : "PARADO ‚ùå")")
    }
    
    if isRunning == 0 {
        print("üéØ Tentando configurar como dispositivo padr√£o...")
        
        // Configurar como dispositivo padr√£o de sa√≠da
        var defaultAddress = AudioObjectPropertyAddress(
            mSelector: kAudioHardwarePropertyDefaultOutputDevice,
            mScope: kAudioObjectPropertyScopeGlobal,
            mElement: kAudioObjectPropertyElementMain)
        
        let status = AudioObjectSetPropertyData(
            AudioObjectID(kAudioObjectSystemObject),
            &defaultAddress, 0, nil,
            UInt32(MemoryLayout<AudioDeviceID>.size), &mrtDeviceID)
        
        if status == noErr {
            print("‚úÖ Configurado como dispositivo padr√£o")
            
            // Aguardar um pouco e verificar novamente
            Thread.sleep(forTimeInterval: 2.0)
            
            isRunning = 0
            if AudioObjectGetPropertyData(mrtDeviceID, &runningAddress, 0, nil, &runningSize, &isRunning) == noErr {
                print("üìä Status ap√≥s configura√ß√£o: \(isRunning == 1 ? "RODANDO ‚úÖ" : "AINDA PARADO ‚ùå")")
            }
        } else {
            print("‚ùå Erro ao configurar como padr√£o: \(status)")
        }
    }
    
    // Verificar dispositivo padr√£o atual
    var currentDefault: AudioDeviceID = kAudioObjectUnknown
    var defaultSize = UInt32(MemoryLayout<AudioDeviceID>.size)
    var defaultAddress = AudioObjectPropertyAddress(
        mSelector: kAudioHardwarePropertyDefaultOutputDevice,
        mScope: kAudioObjectPropertyScopeGlobal,
        mElement: kAudioObjectPropertyElementMain)
    
    if AudioObjectGetPropertyData(AudioObjectID(kAudioObjectSystemObject), &defaultAddress, 0, nil, &defaultSize, &currentDefault) == noErr {
        if currentDefault == mrtDeviceID {
            print("‚úÖ MRTAudio √© o dispositivo padr√£o")
        } else {
            print("‚ö†Ô∏è  MRTAudio N√ÉO √© o dispositivo padr√£o (atual: \(currentDefault))")
        }
    }
}

simpleDriverTest()
EOF

echo "üß™ Executando teste..."
swift /tmp/simple_test.swift

echo ""
echo "üîß Verificando se h√° problemas no c√≥digo do driver..."

# Procurar por logs espec√≠ficos no Console
echo "üìã Buscando logs do driver nos √∫ltimos minutos..."
log show --predicate 'eventMessage contains "MRT" OR eventMessage contains "AudioServerPlugIn"' --last 3m --style syslog 2>/dev/null | tail -20

echo ""
echo "üí° AN√ÅLISE DO PROBLEMA:"
echo "======================"
echo ""
echo "Se o driver ainda n√£o est√° rodando ap√≥s ser configurado como padr√£o,"
echo "isso indica que h√° um problema na implementa√ß√£o do driver."
echo ""
echo "üîç POSS√çVEIS CAUSAS:"
echo "1. Erro na fun√ß√£o de inicializa√ß√£o (MRT_Initialize)"
echo "2. Erro na fun√ß√£o de start (MRT_Start)"
echo "3. Problema nas propriedades do driver"
echo "4. Configura√ß√£o incorreta no Info.plist"
echo ""
echo "üìã PR√ìXIMO PASSO: Analisar c√≥digo do driver"

rm -f /tmp/simple_test.swift