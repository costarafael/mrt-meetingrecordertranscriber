#!/bin/bash

# =============================================================================
# Diagn√≥stico do Estado Atual do Driver
# =============================================================================

echo "üîç DIAGN√ìSTICO DO ESTADO DO DRIVER"
echo "=================================="

echo ""
echo "üìã 1. DRIVER INSTALADO?"
echo "----------------------"

if [ -d "/Library/Audio/Plug-Ins/HAL/MRTAudioDriver.driver" ]; then
    echo "‚úÖ Driver encontrado em /Library/Audio/Plug-Ins/HAL/"
    ls -la /Library/Audio/Plug-Ins/HAL/MRTAudioDriver.driver/Contents/MacOS/
    echo ""
    echo "üîç Verificando arquivo principal:"
    file /Library/Audio/Plug-Ins/HAL/MRTAudioDriver.driver/Contents/MacOS/MRTAudioDriver
else
    echo "‚ùå Driver N√ÉO encontrado"
    exit 1
fi

echo ""
echo "üìã 2. ESTADO DO COREAUDIOD"
echo "-------------------------"

echo "üîÑ Processo coreaudiod:"
ps aux | grep coreaudiod | grep -v grep

echo ""
echo "üìã 3. DISPOSITIVOS DE √ÅUDIO DETECTADOS"
echo "--------------------------------------"

# Script Swift para testar detec√ß√£o
cat > /tmp/audio_devices_test.swift << 'EOF'
import CoreAudio
import Foundation

func testAudioDevices() {
    var propsize: UInt32 = 0
    var address = AudioObjectPropertyAddress(
        mSelector: kAudioHardwarePropertyDevices,
        mScope: kAudioObjectPropertyScopeGlobal,
        mElement: kAudioObjectPropertyElementMain)
    
    var result = AudioObjectGetPropertyDataSize(AudioObjectID(kAudioObjectSystemObject), &address, 0, nil, &propsize)
    guard result == noErr else { 
        print("‚ùå Erro ao obter tamanho da propriedade: \(result)")
        return 
    }
    
    let deviceCount = Int(propsize) / MemoryLayout<AudioDeviceID>.size
    let devices = UnsafeMutablePointer<AudioDeviceID>.allocate(capacity: deviceCount)
    defer { devices.deallocate() }
    
    result = AudioObjectGetPropertyData(AudioObjectID(kAudioObjectSystemObject), &address, 0, nil, &propsize, devices)
    guard result == noErr else { 
        print("‚ùå Erro ao obter dados de dispositivos: \(result)")
        return 
    }
    
    print("üéµ Total de dispositivos: \(deviceCount)")
    
    for i in 0..<deviceCount {
        let deviceID = devices[i]
        
        // Obter nome do dispositivo
        var nameAddress = AudioObjectPropertyAddress(
            mSelector: kAudioDevicePropertyDeviceNameCFString,
            mScope: kAudioObjectPropertyScopeGlobal,
            mElement: kAudioObjectPropertyElementMain)
        
        var nameSize: UInt32 = UInt32(MemoryLayout<CFString>.size)
        var deviceName: CFString = "" as CFString
        
        let nameResult = AudioObjectGetPropertyData(deviceID, &nameAddress, 0, nil, &nameSize, &deviceName)
        
        if nameResult == noErr {
            let name = deviceName as String
            let marker = name.contains("MRT") ? "üéØ" : "  "
            print("\(marker) [\(deviceID)] \(name)")
            
            // Se for MRTAudio, teste propriedades adicionais
            if name.contains("MRT") {
                print("     ‚îî‚îÄ üîç Analisando MRTAudio...")
                
                // Verificar streams de entrada
                var inputStreamAddress = AudioObjectPropertyAddress(
                    mSelector: kAudioDevicePropertyStreams,
                    mScope: kAudioDevicePropertyScopeInput,
                    mElement: kAudioObjectPropertyElementMain)
                
                var inputStreamSize: UInt32 = 0
                let inputResult = AudioObjectGetPropertyDataSize(deviceID, &inputStreamAddress, 0, nil, &inputStreamSize)
                let inputStreamCount = inputResult == noErr ? inputStreamSize / UInt32(MemoryLayout<AudioStreamID>.size) : 0
                
                // Verificar streams de sa√≠da
                var outputStreamAddress = AudioObjectPropertyAddress(
                    mSelector: kAudioDevicePropertyStreams,
                    mScope: kAudioDevicePropertyScopeOutput,
                    mElement: kAudioObjectPropertyElementMain)
                
                var outputStreamSize: UInt32 = 0
                let outputResult = AudioObjectGetPropertyDataSize(deviceID, &outputStreamAddress, 0, nil, &outputStreamSize)
                let outputStreamCount = outputResult == noErr ? outputStreamSize / UInt32(MemoryLayout<AudioStreamID>.size) : 0
                
                print("     ‚îî‚îÄ Streams: \(inputStreamCount) entrada, \(outputStreamCount) sa√≠da")
                
                // Verificar se √© dispositivo padr√£o
                var defaultAddress = AudioObjectPropertyAddress(
                    mSelector: kAudioHardwarePropertyDefaultOutputDevice,
                    mScope: kAudioObjectPropertyScopeGlobal,
                    mElement: kAudioObjectPropertyElementMain)
                
                var defaultSize: UInt32 = UInt32(MemoryLayout<AudioDeviceID>.size)
                var defaultDevice: AudioDeviceID = 0
                
                let defaultResult = AudioObjectGetPropertyData(AudioObjectID(kAudioObjectSystemObject), &defaultAddress, 0, nil, &defaultSize, &defaultDevice)
                
                if defaultResult == noErr && defaultDevice == deviceID {
                    print("     ‚îî‚îÄ ‚úÖ √â o dispositivo de sa√≠da PADR√ÉO")
                } else {
                    print("     ‚îî‚îÄ ‚ÑπÔ∏è  N√ÉO √© o dispositivo de sa√≠da padr√£o (padr√£o: \(defaultDevice))")
                }
            }
        }
    }
}

testAudioDevices()
EOF

swift /tmp/audio_devices_test.swift

echo ""
echo "üìã 4. TESTE DE FUNCIONAMENTO"
echo "----------------------------"

echo "üéØ O MRTAudio est√° configurado como dispositivo padr√£o?"
echo "   V√° em Prefer√™ncias do Sistema ‚Üí Som ‚Üí Sa√≠da"
echo "   e verifique se 'MRTAudio 2ch' est√° selecionado"

echo ""
echo "üìã 5. LOGS DO SISTEMA"
echo "--------------------"

echo "üîç Logs recentes relacionados ao √°udio:"
log show --last 5m --predicate 'subsystem == "com.apple.audio"' --style compact | tail -10

echo ""
echo "üìã 6. RECOMENDA√á√ïES DE TESTE"
echo "----------------------------"

echo "üí° Para testar o passthrough:"
echo "1. Configure MRTAudio 2ch como sa√≠da nas Prefer√™ncias do Sistema"
echo "2. Abra um player de m√∫sica (ex: Spotify, Music)"  
echo "3. Toque uma m√∫sica"
echo "4. Verifique se h√° √°udio"

echo ""
echo "üîß Se n√£o houver √°udio:"
echo "1. Verifique se MRTAudio est√° realmente selecionado"
echo "2. Reinicie o coreaudiod: sudo killall coreaudiod"
echo "3. Tente novamente"

echo ""
echo "üìÑ Logs de debug do driver estar√£o em:"
echo "   Console.app ‚Üí Filtro: 'MRT' ou 'BlackHole'"

rm -f /tmp/audio_devices_test.swift