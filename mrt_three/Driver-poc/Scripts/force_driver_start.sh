#!/bin/bash

# =============================================================================
# FOR√áA INICIALIZA√á√ÉO DO DRIVER MRT
# Problema identificado: Driver est√° vivo mas n√£o est√° rodando
# =============================================================================

echo "üöÄ FOR√áANDO INICIALIZA√á√ÉO DO DRIVER MRT"
echo "======================================="

# Criar aplica√ß√£o Swift para inicializar o driver
cat > /tmp/force_driver_start.swift << 'EOF'
import CoreAudio
import Foundation

func forceDriverStart() {
    print("üîç Procurando driver MRTAudio...")
    
    // Encontrar nosso driver
    var propsize: UInt32 = 0
    var address = AudioObjectPropertyAddress(
        mSelector: kAudioHardwarePropertyDevices,
        mScope: kAudioObjectPropertyScopeGlobal,
        mElement: kAudioObjectPropertyElementMain)
    
    guard AudioObjectGetPropertyDataSize(AudioObjectID(kAudioObjectSystemObject), &address, 0, nil, &propsize) == noErr else {
        print("‚ùå Erro ao obter tamanho da propriedade")
        return
    }
    
    let deviceCount = Int(propsize) / MemoryLayout<AudioDeviceID>.size
    let devices = UnsafeMutablePointer<AudioDeviceID>.allocate(capacity: deviceCount)
    defer { devices.deallocate() }
    
    guard AudioObjectGetPropertyData(AudioObjectID(kAudioObjectSystemObject), &address, 0, nil, &propsize, devices) == noErr else {
        print("‚ùå Erro ao obter dispositivos")
        return
    }
    
    var mrtDeviceID: AudioDeviceID = kAudioObjectUnknown
    
    for i in 0..<deviceCount {
        let deviceID = devices[i]
        
        var nameAddress = AudioObjectPropertyAddress(
            mSelector: kAudioDevicePropertyDeviceNameCFString,
            mScope: kAudioObjectPropertyScopeGlobal,
            mElement: kAudioObjectPropertyElementMain)
        
        var nameSize: UInt32 = UInt32(MemoryLayout<CFString>.size)
        var deviceName: CFString = "" as CFString
        
        if AudioObjectGetPropertyData(deviceID, &nameAddress, 0, nil, &nameSize, &deviceName) == noErr {
            let name = deviceName as String
            if name.contains("MRT") {
                print("‚úÖ Driver MRT encontrado: [\(deviceID)] \(name)")
                mrtDeviceID = deviceID
                break
            }
        }
    }
    
    guard mrtDeviceID != kAudioObjectUnknown else {
        print("‚ùå Driver MRT n√£o encontrado!")
        return
    }
    
    // Verificar status atual
    var isRunning: UInt32 = 0
    var runningAddress = AudioObjectPropertyAddress(
        mSelector: kAudioDevicePropertyDeviceIsRunning,
        mScope: kAudioObjectPropertyScopeGlobal,
        mElement: kAudioObjectPropertyElementMain)
    var runningSize = UInt32(MemoryLayout<UInt32>.size)
    
    if AudioObjectGetPropertyData(mrtDeviceID, &runningAddress, 0, nil, &runningSize, &isRunning) == noErr {
        print("üìä Status atual: \(isRunning == 1 ? "RODANDO" : "PARADO")")
    }
    
    if isRunning == 0 {
        print("üöÄ Tentando inicializar o driver...")
        
        // M√âTODO 1: Configurar como dispositivo padr√£o
        print("üéØ M√©todo 1: Configurando como dispositivo padr√£o...")
        var defaultAddress = AudioObjectPropertyAddress(
            mSelector: kAudioHardwarePropertyDefaultOutputDevice,
            mScope: kAudioObjectPropertyScopeGlobal,
            mElement: kAudioObjectPropertyElementMain)
        
        let status1 = AudioObjectSetPropertyData(
            AudioObjectID(kAudioObjectSystemObject),
            &defaultAddress, 0, nil,
            UInt32(MemoryLayout<AudioDeviceID>.size), &mrtDeviceID)
        
        if status1 == noErr {
            print("‚úÖ Configurado como dispositivo padr√£o")
        } else {
            print("‚ùå Erro ao configurar como padr√£o: \(status1)")
        }
        
        // Aguardar um pouco
        Thread.sleep(forTimeInterval: 1.0)
        
        // M√âTODO 2: Tentar for√ßar inicio manualmente
        print("üéØ M√©todo 2: For√ßando in√≠cio manual...")
        var startRunning: UInt32 = 1
        let status2 = AudioObjectSetPropertyData(
            mrtDeviceID,
            &runningAddress, 0, nil,
            UInt32(MemoryLayout<UInt32>.size), &startRunning)
        
        if status2 == noErr {
            print("‚úÖ Comando de in√≠cio enviado")
        } else {
            print("‚ùå Erro ao enviar comando de in√≠cio: \(status2)")
        }
        
        // Aguardar um pouco
        Thread.sleep(forTimeInterval: 1.0)
        
        // M√âTODO 3: Simular uso do dispositivo criando um AudioQueue
        print("üéØ M√©todo 3: Simulando uso do dispositivo...")
        
        var format = AudioStreamBasicDescription()
        format.mSampleRate = 48000.0
        format.mFormatID = kAudioFormatLinearPCM
        format.mFormatFlags = kAudioFormatFlagIsFloat | kAudioFormatFlagIsPacked
        format.mBytesPerPacket = MemoryLayout<Float32>.size * 2
        format.mFramesPerPacket = 1
        format.mBytesPerFrame = MemoryLayout<Float32>.size * 2
        format.mChannelsPerFrame = 2
        format.mBitsPerChannel = 32
        
        var audioQueue: AudioQueueRef?
        let status3 = AudioQueueNewOutput(&format, nil, nil, nil, kCFRunLoopCommonModes, 0, &audioQueue)
        
        if status3 == noErr && audioQueue != nil {
            print("‚úÖ AudioQueue criado")
            
            // Tentar especificar nosso device
            var deviceProperty = mrtDeviceID
            let status4 = AudioQueueSetProperty(audioQueue!, kAudioQueueProperty_CurrentDevice, &deviceProperty, UInt32(MemoryLayout<AudioDeviceID>.size))
            
            if status4 == noErr {
                print("‚úÖ AudioQueue configurado para nosso device")
                
                // Iniciar o AudioQueue
                let status5 = AudioQueueStart(audioQueue!, nil)
                if status5 == noErr {
                    print("‚úÖ AudioQueue iniciado")
                    
                    // Aguardar para for√ßar inicializa√ß√£o
                    Thread.sleep(forTimeInterval: 2.0)
                    
                    AudioQueueStop(audioQueue!, true)
                    print("‚úÖ AudioQueue parado")
                } else {
                    print("‚ùå Erro ao iniciar AudioQueue: \(status5)")
                }
            } else {
                print("‚ùå Erro ao configurar device no AudioQueue: \(status4)")
            }
            
            AudioQueueDispose(audioQueue!, true)
        } else {
            print("‚ùå Erro ao criar AudioQueue: \(status3)")
        }
        
        // Verificar status final
        Thread.sleep(forTimeInterval: 1.0)
        
        isRunning = 0
        if AudioObjectGetPropertyData(mrtDeviceID, &runningAddress, 0, nil, &runningSize, &isRunning) == noErr {
            print("üìä Status final: \(isRunning == 1 ? "RODANDO ‚úÖ" : "AINDA PARADO ‚ùå")")
        }
    } else {
        print("‚úÖ Driver j√° est√° rodando!")
    }
}

forceDriverStart()
EOF

echo "üß™ Executando tentativa de inicializa√ß√£o..."
swift /tmp/force_driver_start.swift

echo ""
echo "üîç Verificando resultado..."

# Testar novamente o status
swift -c "
import CoreAudio
import Foundation

var propsize: UInt32 = 0
var address = AudioObjectPropertyAddress(
    mSelector: kAudioHardwarePropertyDevices,
    mScope: kAudioObjectPropertyScopeGlobal,
    mElement: kAudioObjectPropertyElementMain)

if AudioObjectGetPropertyDataSize(AudioObjectID(kAudioObjectSystemObject), &address, 0, nil, &propsize) == noErr {
    let deviceCount = Int(propsize) / MemoryLayout<AudioDeviceID>.size
    let devices = UnsafeMutablePointer<AudioDeviceID>.allocate(capacity: deviceCount)
    defer { devices.deallocate() }
    
    if AudioObjectGetPropertyData(AudioObjectID(kAudioObjectSystemObject), &address, 0, nil, &propsize, devices) == noErr {
        for i in 0..<deviceCount {
            let deviceID = devices[i]
            
            var nameAddress = AudioObjectPropertyAddress(
                mSelector: kAudioDevicePropertyDeviceNameCFString,
                mScope: kAudioObjectPropertyScopeGlobal,
                mElement: kAudioObjectPropertyElementMain)
            
            var nameSize: UInt32 = UInt32(MemoryLayout<CFString>.size)
            var deviceName: CFString = \"\" as CFString
            
            if AudioObjectGetPropertyData(deviceID, &nameAddress, 0, nil, &nameSize, &deviceName) == noErr {
                let name = deviceName as String
                if name.contains(\"MRT\") {
                    var isRunning: UInt32 = 0
                    var runningAddress = AudioObjectPropertyAddress(
                        mSelector: kAudioDevicePropertyDeviceIsRunning,
                        mScope: kAudioObjectPropertyScopeGlobal,
                        mElement: kAudioObjectPropertyElementMain)
                    var runningSize = UInt32(MemoryLayout<UInt32>.size)
                    
                    if AudioObjectGetPropertyData(deviceID, &runningAddress, 0, nil, &runningSize, &isRunning) == noErr {
                        print(\"üéØ MRTAudio [\(deviceID)]: \(isRunning == 1 ? \"RODANDO ‚úÖ\" : \"PARADO ‚ùå\")\")
                    }
                    break
                }
            }
        }
    }
}
"

echo ""
echo "üí° PR√ìXIMOS PASSOS:"
echo "1. Se ainda estiver parado, h√° problema na implementa√ß√£o do driver"
echo "2. Se estiver rodando, teste reproduzir √°udio"
echo "3. Verifique se MRTAudio est√° como sa√≠da padr√£o nas prefer√™ncias"

rm -f /tmp/force_driver_start.swift