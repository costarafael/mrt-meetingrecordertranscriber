#!/bin/bash

# =============================================================================
# DIAGN√ìSTICO DETALHADO DO STATUS DO DRIVER
# =============================================================================

echo "üîç DIAGN√ìSTICO COMPLETO DO DRIVER MRT"
echo "====================================="

# Verificar se o driver est√° instalado
echo ""
echo "üì¶ 1. VERIFICANDO INSTALA√á√ÉO:"
echo "----------------------------"

INSTALL_PATH="/Library/Audio/Plug-Ins/HAL/MRTAudioDriver.driver"
if [ -d "$INSTALL_PATH" ]; then
    echo "‚úÖ Driver instalado em: $INSTALL_PATH"
    
    # Verificar permiss√µes
    echo "üîë Permiss√µes:"
    ls -la "$INSTALL_PATH/"
    
    # Verificar se o bin√°rio existe
    BINARY_PATH="$INSTALL_PATH/Contents/MacOS/MRTAudioDriver"
    if [ -f "$BINARY_PATH" ]; then
        echo "‚úÖ Bin√°rio encontrado: $BINARY_PATH"
        
        # Verificar arquitetura
        echo "üèóÔ∏è  Arquitetura:"
        file "$BINARY_PATH"
        
        # Verificar assinatura
        echo "üìù Assinatura:"
        codesign -dv "$BINARY_PATH" 2>&1 | head -5
    else
        echo "‚ùå Bin√°rio n√£o encontrado!"
    fi
    
else
    echo "‚ùå Driver N√ÉO instalado!"
    exit 1
fi

echo ""
echo "üéõÔ∏è  2. VERIFICANDO STATUS NO SISTEMA:"
echo "------------------------------------"

# Verificar se o driver est√° carregado
echo "üìä Dispositivos de √°udio detectados:"
system_profiler SPAudioDataType | grep -A 10 -B 2 "MRT"

echo ""
echo "üîä Status do Core Audio:"
# Listar todos os dispositivos
echo "Todos os dispositivos:"
ioreg -l | grep -E "(IOAudioDevice|name.*Audio)" | head -10

echo ""
echo "üéØ 3. TESTANDO COMUNICA√á√ÉO COM DRIVER:"
echo "-------------------------------------"

# Compilar e executar teste r√°pido
cat > /tmp/quick_driver_test.swift << 'EOF'
import CoreAudio
import Foundation

func testDriverCommunication() {
    print("üîç Buscando driver MRTAudio...")
    
    var propsize: UInt32 = 0
    var address = AudioObjectPropertyAddress(
        mSelector: kAudioHardwarePropertyDevices,
        mScope: kAudioObjectPropertyScopeGlobal,
        mElement: kAudioObjectPropertyElementMain)
    
    guard AudioObjectGetPropertyDataSize(AudioObjectID(kAudioObjectSystemObject), &address, 0, nil, &propsize) == noErr else {
        print("‚ùå Erro ao obter tamanho da propriedade")
        return
    }
    
    let deviceCount = Int(propsize) / MemoryLayout<AudioDeviceID>.size
    let devices = UnsafeMutablePointer<AudioDeviceID>.allocate(capacity: deviceCount)
    defer { devices.deallocate() }
    
    guard AudioObjectGetPropertyData(AudioObjectID(kAudioObjectSystemObject), &address, 0, nil, &propsize, devices) == noErr else {
        print("‚ùå Erro ao obter dispositivos")
        return
    }
    
    print("üìä Encontrados \(deviceCount) dispositivos de √°udio")
    
    for i in 0..<deviceCount {
        let deviceID = devices[i]
        
        var nameAddress = AudioObjectPropertyAddress(
            mSelector: kAudioDevicePropertyDeviceNameCFString,
            mScope: kAudioObjectPropertyScopeGlobal,
            mElement: kAudioObjectPropertyElementMain)
        
        var nameSize: UInt32 = UInt32(MemoryLayout<CFString>.size)
        var deviceName: CFString = "" as CFString
        
        if AudioObjectGetPropertyData(deviceID, &nameAddress, 0, nil, &nameSize, &deviceName) == noErr {
            let name = deviceName as String
            print("üéµ [\(deviceID)] \(name)")
            
            if name.contains("MRT") {
                print("  üéØ DRIVER MRT ENCONTRADO!")
                
                // Verificar propriedades espec√≠ficas
                var isAlive: UInt32 = 0
                var aliveAddress = AudioObjectPropertyAddress(
                    mSelector: kAudioDevicePropertyDeviceIsAlive,
                    mScope: kAudioObjectPropertyScopeGlobal,
                    mElement: kAudioObjectPropertyElementMain)
                var aliveSize = UInt32(MemoryLayout<UInt32>.size)
                
                if AudioObjectGetPropertyData(deviceID, &aliveAddress, 0, nil, &aliveSize, &isAlive) == noErr {
                    print("  ‚úÖ Driver est√° vivo: \(isAlive == 1 ? "SIM" : "N√ÉO")")
                }
                
                // Verificar se est√° rodando
                var isRunning: UInt32 = 0
                var runningAddress = AudioObjectPropertyAddress(
                    mSelector: kAudioDevicePropertyDeviceIsRunning,
                    mScope: kAudioObjectPropertyScopeGlobal,
                    mElement: kAudioObjectPropertyElementMain)
                var runningSize = UInt32(MemoryLayout<UInt32>.size)
                
                if AudioObjectGetPropertyData(deviceID, &runningAddress, 0, nil, &runningSize, &isRunning) == noErr {
                    print("  ‚úÖ Driver est√° rodando: \(isRunning == 1 ? "SIM" : "N√ÉO")")
                }
                
                // Verificar formato de stream
                var streamAddress = AudioObjectPropertyAddress(
                    mSelector: kAudioDevicePropertyStreamFormat,
                    mScope: kAudioObjectPropertyScopeOutput,
                    mElement: kAudioObjectPropertyElementMain)
                var streamSize = UInt32(MemoryLayout<AudioStreamBasicDescription>.size)
                var streamFormat = AudioStreamBasicDescription()
                
                if AudioObjectGetPropertyData(deviceID, &streamAddress, 0, nil, &streamSize, &streamFormat) == noErr {
                    print("  üìä Taxa de amostragem: \(streamFormat.mSampleRate) Hz")
                    print("  üìä Canais: \(streamFormat.mChannelsPerFrame)")
                    print("  üìä Formato: \(streamFormat.mFormatID == kAudioFormatLinearPCM ? "Linear PCM" : "Outro")")
                }
            }
        }
    }
}

testDriverCommunication()
EOF

echo "üß™ Executando teste de comunica√ß√£o:"
swift /tmp/quick_driver_test.swift

echo ""
echo "üö® 4. VERIFICANDO LOGS DE ERRO:"
echo "------------------------------"

# Buscar logs recentes relacionados ao driver
echo "üìã Logs recentes do sistema (√∫ltimos 2 minutos):"
log show --predicate 'eventMessage contains "MRT" || eventMessage contains "AudioServerPlugIn"' --last 2m --style syslog 2>/dev/null | head -10

echo ""
echo "üîß 5. VERIFICANDO CONFIGURA√á√ÉO ATUAL:"
echo "------------------------------------"

# Verificar dispositivo de sa√≠da atual
echo "üéØ Dispositivo de sa√≠da atual do sistema:"
defaults read com.apple.systempreferences com.apple.preference.sound 2>/dev/null || echo "N√£o foi poss√≠vel verificar"

# Verificar se h√° Multi-Output Device
echo ""
echo "üì± Verificando Multi-Output Devices:"
system_profiler SPAudioDataType | grep -i "multi"

echo ""
echo "‚úÖ DIAGN√ìSTICO COMPLETO!"
echo "======================="
echo ""
echo "üí° PR√ìXIMOS PASSOS:"
echo "1. Se o driver est√° vivo mas n√£o funciona: problema na implementa√ß√£o de passthrough"
echo "2. Se o driver n√£o est√° vivo: problema de instala√ß√£o ou c√≥digo"
echo "3. Se n√£o foi encontrado: problema de instala√ß√£o"

rm -f /tmp/quick_driver_test.swift